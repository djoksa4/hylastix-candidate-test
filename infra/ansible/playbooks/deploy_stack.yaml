---
- name: Deploy Keycloak, Postgres, and Webserver
  hosts: all
  become: true

  vars:
    web_content_dir_host: /var/www/html
    nginx_config_dir_host: /etc/nginx/conf.d
    keycloak_client: web-client


  tasks:

    #### DATABASE ####
    - name: Deploy Postgres container
      community.docker.docker_container:
        name: postgres
        image: "{{ postgres_image }}"
        state: started
        restart_policy: always
        env:
          POSTGRES_DB: "{{ postgres_db_name }}"
          POSTGRES_USER: "{{ postgres_user }}"
          POSTGRES_PASSWORD: "{{ postgres_password }}"
        networks:
          - name: app-net

    #### KEYCLOAK ####
    - name: Deploy Keycloak container
      community.docker.docker_container:
        name: keycloak
        image: "{{ keycloak_image }}"
        state: started
        restart_policy: always
        recreate: yes
        env:
          KEYCLOAK_ADMIN: "{{ keycloak_admin_user }}"
          KEYCLOAK_ADMIN_PASSWORD: "{{ keycloak_admin_password }}"
          KC_DB: postgres
          KC_DB_URL_HOST: postgres
          KC_DB_URL_DATABASE: "{{ postgres_db_name }}"
          KC_DB_USERNAME: "{{ postgres_user }}"
          KC_DB_PASSWORD: "{{ postgres_password }}"
          KC_HOSTNAME_STRICT: "false"
          # KEYCLOAK_DEV_MODE: "true"
        # command: start-dev
        command: start
        networks:
          - name: app-net
        published_ports:
          - 18080:8080

    - name: Wait for Keycloak on host port
      ansible.builtin.wait_for:
        host: 127.0.0.1
        port: 18080 
        delay: 5
        timeout: 300
        state: started

    - name: Configure Keycloak credentials
      community.docker.docker_container_exec:
        container: keycloak
        command: >
          /opt/keycloak/bin/kcadm.sh config credentials
          --server http://127.0.0.1:8080
          --realm master
          --user {{ keycloak_admin_user }}
          --password {{ keycloak_admin_password }}
      register: kc_login
      retries: 15
      delay: 5
      until: kc_login.rc == 0

    - name: Create myrealm in Keycloak
      community.docker.docker_container_exec:
        container: keycloak
        command: >
          /opt/keycloak/bin/kcadm.sh create realms
          -s realm=myrealm
          -s enabled=true
      register: kc_realm
      ignore_errors: true

    - name: Create web-client in myrealm
      community.docker.docker_container_exec:
        container: keycloak
        command: >
          /opt/keycloak/bin/kcadm.sh create clients
          -r myrealm
          -s clientId={{ keycloak_client }}
          -s enabled=true
          -s publicClient=false
          -s secret={{ keycloak_client_secret }}
          -s redirectUris=["https://20.16.68.65/oauth2/callback"]

    #### PROXY ####
    - name: Deploy oauth2-proxy container
      community.docker.docker_container:
        name: oauth2-proxy
        image: "{{ oauth2_proxy_image }}"
        state: started
        restart_policy: always
        recreate: yes
        env:
          OAUTH2_PROXY_PROVIDER: keycloak
          OAUTH2_PROXY_CLIENT_ID: "{{ keycloak_client }}"
          OAUTH2_PROXY_CLIENT_SECRET: "{{ keycloak_client_secret }}"
          OAUTH2_PROXY_COOKIE_SECRET: "{{ oauth2_proxy_cookie_secret }}"
          OAUTH2_PROXY_OIDC_ISSUER_URL: "http://keycloak:8080/realms/myrealm"
          OAUTH2_PROXY_EMAIL_DOMAINS: "*"
        networks:
          - name: app-net
        command: "--http-address=0.0.0.0:4180"

    #### WEBSERVER ####
    - name: Ensure web content directory exists
      file:
        path: "{{ web_content_dir_host }}"
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Copy static web content to host
      copy:
        src: "{{ web_content_dir_local }}"
        dest: "{{ web_content_dir_host }}"
        owner: root
        group: root
        mode: '0644'
        directory_mode: '0755'

    - name: Ensure Nginx config directory exists
      file:
        path: "{{ nginx_config_dir_host }}"
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Copy Nginx config files to host
      copy:
        src: "{{ nginx_config_dir_local }}"
        dest: "{{ nginx_config_dir_host }}/"
        owner: root
        group: root
        mode: '0644'
        directory_mode: '0755'

    - name: Deploy Webserver container
      community.docker.docker_container:
        name: nginx
        image: "{{ web_image }}"
        state: started
        restart_policy: always
        recreate: yes
        published_ports:
          - "{{ web_port }}:80"
        volumes:
          - "{{ web_content_dir_host }}:/usr/share/nginx/html:ro"
          - "{{ nginx_config_dir_host }}:/etc/nginx/conf.d:ro"
        networks:
          - name: app-net

